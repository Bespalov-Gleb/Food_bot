#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import os

def test_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥–∞–Ω–Ω—ã–µ"""
    
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = "data.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        
        print(f"\nüìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        for table in tables:
            print(f"  - {table[0]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É restaurant_admins
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É restaurant_admins:")
        try:
            cursor.execute("SELECT * FROM restaurant_admins LIMIT 10;")
            rows = cursor.fetchall()
            
            if rows:
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π:")
                for row in rows:
                    print(f"    - user_id: {row[0]}, restaurant_id: {row[1]}")
            else:
                print(f"  ‚ö†Ô∏è  –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except sqlite3.OperationalError as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã restaurant_admins: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É restaurants
        print(f"\nüè™ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É restaurants:")
        try:
            cursor.execute("SELECT id, name, is_enabled FROM restaurants LIMIT 10;")
            rows = cursor.fetchall()
            
            if rows:
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(rows)} —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:")
                for row in rows:
                    print(f"    - ID: {row[0]}, –ù–∞–∑–≤–∞–Ω–∏–µ: {row[1]}, –í–∫–ª—é—á–µ–Ω: {row[2]}")
            else:
                print(f"  ‚ö†Ô∏è  –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except sqlite3.OperationalError as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã restaurants: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É orders
        print(f"\nüì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É orders:")
        try:
            cursor.execute("SELECT id, restaurant_id, status, created_at FROM orders LIMIT 10;")
            rows = cursor.fetchall()
            
            if rows:
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(rows)} –∑–∞–∫–∞–∑–æ–≤:")
                for row in rows:
                    print(f"    - ID: {row[0]}, –†–µ—Å—Ç–æ—Ä–∞–Ω: {row[1]}, –°—Ç–∞—Ç—É—Å: {row[2]}, –î–∞—Ç–∞: {row[3]}")
            else:
                print(f"  ‚ö†Ô∏è  –ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except sqlite3.OperationalError as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã orders: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
        print(f"\nüë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users:")
        try:
            cursor.execute("SELECT id, username, is_blocked FROM users LIMIT 10;")
            rows = cursor.fetchall()
            
            if rows:
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(rows)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
                for row in rows:
                    print(f"    - ID: {row[0]}, Username: {row[1]}, –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {row[2]}")
            else:
                print(f"  ‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except sqlite3.OperationalError as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã users: {e}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    test_database() 