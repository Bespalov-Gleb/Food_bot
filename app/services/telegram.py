import os
import httpx
from dotenv import load_dotenv
from app.logging_config import get_logger


load_dotenv()


BOT_TOKEN = os.getenv("BOT_TOKEN", "")
ADMIN_CHANNEL_ID = os.getenv("ADMIN_CHANNEL_ID", "")
WEBAPP_URL = os.getenv("WEBAPP_URL", "")
SUPPORT_TG_URL = os.getenv("SUPPORT_TG_URL", "https://t.me/support")
logger = get_logger("telegram")


async def send_admin_message(text: str) -> None:
    if not BOT_TOKEN or not ADMIN_CHANNEL_ID:
        logger.warning("admin_message: missing token or channel")
        return
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": ADMIN_CHANNEL_ID, "text": text}
    async with httpx.AsyncClient(timeout=10) as client:
        try:
            await client.post(url, json=payload)
        except Exception as exc:
            logger.exception("admin_message: exception: %s", repr(exc))
            return


async def send_user_message(chat_id: int, text: str, button_text: str | None = None, button_url: str | None = None) -> bool:
    if not BOT_TOKEN or not chat_id:
        logger.warning("user_message: missing token or chat_id")
        return False
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload: dict = {"chat_id": chat_id, "text": text}
    if button_text and button_url:
        payload["reply_markup"] = {
            "inline_keyboard": [[{"text": button_text, "web_app": {"url": button_url}}]]
        }
    async with httpx.AsyncClient(timeout=10) as client:
        try:
            resp = await client.post(url, json=payload)
            ok = 200 <= resp.status_code < 300
            if not ok:
                logger.error(
                    "user_message: non-200 response", extra={
                        "status": resp.status_code, "body": resp.text, "chat_id": chat_id, "url": button_url
                    }
                )
            return ok
        except Exception as exc:
            logger.exception("user_message: exception: %s", repr(exc))
            return False


async def notify_user_order_modified(chat_id: int, url: str, text: str | None = None) -> None:
    if not BOT_TOKEN or not chat_id:
        return
    api = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text or "–ó–∞–∫–∞–∑ –∏–∑–º–µ–Ω—ë–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º. –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑.",
        "reply_markup": {"inline_keyboard": [[{"text": "–û—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑", "web_app": {"url": url}}]]},
    }
    async with httpx.AsyncClient(timeout=10) as client:
        try:
            await client.post(api, json=payload)
        except Exception:
            return


async def notify_user_order_accepted(chat_id: int, url: str, restaurant_name: str, eta_minutes: int) -> None:
    if not BOT_TOKEN or not chat_id:
        return
    api = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    text = f"–†–µ—Å—Ç–æ—Ä–∞–Ω \"{restaurant_name}\" –ø—Ä–∏–Ω—è–ª –í–∞—à –∑–∞–∫–∞–∑.  –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ - {eta_minutes} –º–∏–Ω."
    payload = {
        "chat_id": chat_id,
        "text": text,
        "reply_markup": {"inline_keyboard": [[{"text": "–û—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑", "web_app": {"url": url}}]]},
    }
    async with httpx.AsyncClient(timeout=10) as client:
        try:
            await client.post(api, json=payload)
        except Exception:
            return


async def notify_user_order_delivered(chat_id: int, order_id: int, restaurant_name: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –¥–æ—Å—Ç–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ü–µ–Ω–∫–∏"""
    if not BOT_TOKEN or not chat_id:
        return
    
    review_url = f"{WEBAPP_URL}/static/order.html?order_id={order_id}&show_review=1"
    
    api = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    text = f"üéâ –í–∞—à –∑–∞–∫–∞–∑ –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ \"{restaurant_name}\" –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ."
    payload = {
        "chat_id": chat_id,
        "text": text,
        "reply_markup": {
            "inline_keyboard": [[
                {"text": "‚≠ê –û—Ü–µ–Ω–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω", "web_app": {"url": review_url}}
            ]]
        },
    }
    async with httpx.AsyncClient(timeout=10) as client:
        try:
            await client.post(api, json=payload)
        except Exception as exc:
            logger.exception("notify_user_order_delivered: exception: %s", repr(exc))
            return


async def notify_restaurant_admins(restaurant_id: int, message: str, button_text: str | None = None, button_url: str | None = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    if not BOT_TOKEN:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from app.db import get_session
    from app.models import RestaurantAdmin
    
    try:
        db = get_session()
        admin_rows = db.query(RestaurantAdmin).filter(RestaurantAdmin.restaurant_id == restaurant_id).all()
        
        if not admin_rows:
            logger.warning(f"No restaurant admins found for restaurant_id={restaurant_id}")
            return
        
        api = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        
        for admin in admin_rows:
            payload = {
                "chat_id": admin.user_id,
                "text": message
            }
            
            if button_text and button_url:
                payload["reply_markup"] = {
                    "inline_keyboard": [[
                        {"text": button_text, "web_app": {"url": button_url}}
                    ]]
                }
            
            async with httpx.AsyncClient(timeout=10) as client:
                try:
                    resp = await client.post(api, json=payload)
                    if resp.status_code == 200:
                        logger.info(f"Notification sent to restaurant admin {admin.user_id} for restaurant {restaurant_id}")
                    else:
                        logger.warning(f"Failed to send notification to admin {admin.user_id}: {resp.status_code}")
                except Exception as exc:
                    logger.exception(f"Error sending notification to admin {admin.user_id}: {exc}")
                    
    except Exception as exc:
        logger.exception(f"Error in notify_restaurant_admins: {exc}")
    finally:
        if 'db' in locals():
            db.close()


async def resolve_username_to_user_id(username: str) -> int | None:
    """–†–∞–∑—Ä–µ—à–∞–µ—Ç username –≤ user_id —á–µ—Ä–µ–∑ Telegram Bot API"""
    if not BOT_TOKEN:
        logger.warning("resolve_username: missing bot token")
        return None
    
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    clean_username = username.lstrip('@')
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    from app.store import get_user_by_username
    db_user_id = get_user_by_username(clean_username)
    if db_user_id:
        logger.info("resolve_username: found user %s in database with id %d", clean_username, db_user_id)
        return db_user_id
    
    # –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ getChat (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏/–≥—Ä—É–ø–ø–∞–º–∏)
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getChat"
    payload = {"chat_id": f"@{clean_username}"}
    
    async with httpx.AsyncClient(timeout=10) as client:
        try:
            resp = await client.post(url, json=payload)
            if resp.status_code == 200:
                data = resp.json()
                if data.get("ok") and data.get("result"):
                    return data["result"]["id"]
        except Exception:
            pass
    
    # –ï—Å–ª–∏ getChat –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ getUpdates –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–∞–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
        resp = await client.get(url)
        if resp.status_code == 200:
            data = resp.json()
            if data.get("ok") and data.get("result"):
                for update in data["result"]:
                    if "message" in update:
                        user = update["message"].get("from")
                        if user and user.get("username") == clean_username:
                            return user["id"]
                    elif "callback_query" in update:
                        user = update["callback_query"].get("from")
                        if user and user.get("username") == clean_username:
                            return user["id"]
    except Exception:
        pass
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º
    logger.warning("resolve_username: failed to resolve %s. User must interact with bot first.", username)
    return None


