import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
import httpx
from app.logging_config import get_logger

load_dotenv()


BOT_TOKEN = os.getenv("BOT_TOKEN", "")
# –ü—É–±–ª–∏—á–Ω—ã–π URL (–¥–ª—è web_app —Å—Å—ã–ª–æ–∫)
PUBLIC_WEBAPP_URL = os.getenv("PUBLIC_WEBAPP_URL", os.getenv("WEBAPP_URL", "http://localhost:8000"))
# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π URL API (–¥–ª—è http-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ docker-—Å–µ—Ç–∏)
INTERNAL_API_URL = os.getenv("INTERNAL_API_URL", os.getenv("WEBAPP_URL", "http://localhost:8000"))
SUPER_ADMIN_IDS = {int(x) for x in os.getenv("SUPER_ADMIN_IDS", "").split(",") if x.strip().isdigit()}
ADMIN_CODE = os.getenv("ADMIN_CODE", "").strip()

# –ü—Ä–æ—Å—Ç–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–¥–æ–≤–æ–º—É —Å–ª–æ–≤—É
ADMIN_SESSIONS: set[int] = set()


logger = get_logger("tg-bot")
dp = Dispatcher()


@dp.message(CommandStart())
async def start(message: types.Message) -> None:
    # register user as active and save username
    username = message.from_user.username
    
    try:
        async with httpx.AsyncClient(timeout=30) as client:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º username
            r = await client.post(
                INTERNAL_API_URL + "/api/users/activate", 
                headers={"X-Telegram-User-Id": str(message.from_user.id)},
                json={"username": username} if username else {}
            )
            logger.info("activate_user id=%s username=%s status=%s", message.from_user.id, username, getattr(r, "status_code", "n/a"))
    except Exception as exc:
        logger.exception("activate_user failed: %s", repr(exc))
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
    
    url = PUBLIC_WEBAPP_URL + f"/static/index.html?ngrok-skip-browser-warning=1&uid={message.from_user.id}&v=6"
    if PUBLIC_WEBAPP_URL.lower().startswith("https://"):
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=url))]]
        )
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–∫—Ä–æ–π—Ç–µ mini app.", reply_markup=kb)
    else:
        await message.answer(
            "–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è mini app –Ω—É–∂–µ–Ω HTTPS. –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: " + url
        )


async def _is_restaurant_admin(user_id: int) -> bool:
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            url = INTERNAL_API_URL + "/api/ra/me"
            r = await client.get(url, headers={"X-Telegram-User-Id": str(user_id)})
            return r.status_code == 200
    except Exception:
        return False


def _inline_kb(rows: list[list[tuple[str, str]]]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=t, callback_data=d) for (t, d) in row] for row in rows]
    )

RA_INLINE_KB = _inline_kb([
    [("–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", "ra_profile"), ("–ú–µ–Ω—é", "open_menu")],
])


@dp.message(Command("status"))
async def check_user_status(message: types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    response = f"üë§ **–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n\n"
    response += f"**ID:** `{user_id}`\n"
    if username:
        response += f"**Username:** @{username}\n"
    if first_name:
        response += f"**–ò–º—è:** {first_name}\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    is_ra = await _is_restaurant_admin(user_id)
    response += f"\n**–ê–¥–º–∏–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:** {'‚úÖ –î–∞' if is_ra else '‚ùå –ù–µ—Ç'}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
    is_super = user_id in SUPER_ADMIN_IDS
    response += f"\n**–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω:** {'‚úÖ –î–∞' if is_super else '‚ùå –ù–µ—Ç'}"
    
    if not is_ra and not is_super:
        response += f"\n\nüí° **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:**\n"
        response += f"‚Ä¢ `/id` - –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à ID\n"
        response += f"‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
    
    await message.answer(response, parse_mode="Markdown")


@dp.message(Command("id"))
async def get_user_id(message: types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    response = f"üÜî **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**\n\n"
    response += f"**ID:** `{user_id}`\n"
    if username:
        response += f"**Username:** @{username}\n"
    if first_name:
        response += f"**–ò–º—è:** {first_name}\n"
    
    response += f"\nüí° **–î–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID:** `{user_id}`"
    
    await message.answer(response, parse_mode="Markdown")

@dp.message(Command("admin"))
async def admin_entry(message: types.Message) -> None:
    user_id = message.from_user.id
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    if await _is_restaurant_admin(user_id):
        await message.answer("–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –æ—Ç–∫—Ä—ã—Ç.", reply_markup=RA_INLINE_KB)
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∞—Ç—å –∏–º
    await message.answer(
        "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.\n\n"
        "–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:\n"
        "1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –∫–∞–∫ –∞–¥–º–∏–Ω–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞\n"
        "2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /id —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à ID –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n\n"
        "–ï—Å–ª–∏ –≤—ã —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    )


# --- –ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –∫–Ω–æ–ø–∫–∏ ---



# Inline –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
ADMIN_INLINE_KB = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω", callback_data="admin_add_restaurant"),
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω", callback_data="admin_delete_restaurant")
        ],
        [
            InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω", callback_data="admin_enable_restaurant"),
            InlineKeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω", callback_data="admin_disable_restaurant")
        ],
        [
            InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
            InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        ],
        [
            InlineKeyboardButton(text="–í–µ–±-–∞–¥–º–∏–Ω–∫–∞", callback_data="admin_web")
        ],
        [
            InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="admin_menu")
        ],
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
STATS_KB = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_global"),
            InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É", callback_data="stats_restaurant")
        ],
        [
            InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="stats_users")
        ],
        [
            InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")
        ],
    ]
)


@dp.message(lambda message: message.text and os.getenv("ADMIN_CODE", "").strip() and message.text.strip() == os.getenv("ADMIN_CODE", "").strip())
async def handle_admin_code(message: types.Message) -> None:
    # –í—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω—É—é –∞–¥–º–∏–Ω–∫—É –ø–æ –∫–æ–¥–æ–≤–æ–º—É —Å–ª–æ–≤—É
    ADMIN_SESSIONS.add(message.from_user.id)
    await message.answer("–ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –î–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω–∫—É –æ—Ç–∫—Ä—ã—Ç.", reply_markup=ADMIN_INLINE_KB)





# --- –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω: –î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω ---

ADD_REST_KB = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="@–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞"), KeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")], [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True,
)

DEL_REST_KB = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True,
)

CONFIRM_KB = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]], resize_keyboard=True
)

ADD_FLOW: dict[int, dict] = {}
BROADCAST_FLOW: dict[int, dict] = {}
DEL_FLOW: dict[int, dict] = {}


async def _resolve_user_id_by_username(username: str) -> int | None:
    uname = username.strip()
    if not uname:
        return None
    if not uname.startswith("@"):
        uname = "@" + uname
    if not BOT_TOKEN:
        return None
    
    print(f"DEBUG: Resolving username: {uname}")
    
    try:
        async with httpx.AsyncClient(timeout=7) as client:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º getChat
            resp = await client.get(f"https://api.telegram.org/bot{BOT_TOKEN}/getChat", params={"chat_id": uname})
            data = resp.json()
            print(f"DEBUG: getChat response: {data}")
            
            if data.get("ok") and data.get("result", {}).get("id"):
                user_id = int(data["result"]["id"])
                print(f"DEBUG: Found user_id via getChat: {user_id}")
                return user_id
            
            # –ï—Å–ª–∏ getChat –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ API –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            print(f"DEBUG: getChat failed, trying internal API")
            api_resp = await client.get(f"{INTERNAL_API_URL}/api/admin/users/resolve-username?username={uname}")
            api_data = api_resp.json()
            print(f"DEBUG: Internal API response: {api_data}")
            
            if api_resp.status_code == 200 and api_data.get("user_id"):
                user_id = int(api_data["user_id"])
                print(f"DEBUG: Found user_id via internal API: {user_id}")
                return user_id
                
    except Exception as e:
        print(f"DEBUG: Exception in _resolve_user_id_by_username: {e}")
        return None
    
    print(f"DEBUG: Could not resolve username: {uname}")
    return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Inline –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∫–∏
@dp.callback_query(F.data == "admin_add_restaurant")
async def admin_add_restaurant_callback(callback: types.CallbackQuery) -> None:
    uid = callback.from_user.id
    print(f"DEBUG: admin_add_restaurant_callback called for user {uid}")
    
    if uid not in SUPER_ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    ADD_FLOW[uid] = {"username": None, "name": None, "step": "username"}
    print(f"DEBUG: ADD_FLOW initialized for user {uid}: {ADD_FLOW[uid]}")
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ username –∞–¥–º–∏–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    await callback.answer()

@dp.callback_query(F.data == "admin_delete_restaurant")
async def admin_delete_restaurant_callback(callback: types.CallbackQuery) -> None:
    uid = callback.from_user.id
    if uid not in SUPER_ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.")
        return
    
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            response = await client.get(INTERNAL_API_URL + "/api/admin/restaurants", headers={"X-Telegram-User-Id": str(uid)})
            if response.status_code == 200:
                restaurants = response.json()
                
                if not restaurants:
                    await callback.message.answer("‚ùå –ù–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
                keyboard = []
                for restaurant in restaurants:
                    status = "‚úÖ" if restaurant.get("is_enabled") else "‚ùå"
                    keyboard.append([
                        InlineKeyboardButton(
                            text=f"{status} {restaurant['name']}", 
                            callback_data=f"delete_rest_{restaurant['id']}"
                        )
                    ])
                
                keyboard.append([InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")])
                
                kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
                await callback.message.edit_text("üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
            else:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
    except Exception as e:
        logger.exception("Error getting restaurants for delete")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
    
    await callback.answer()

@dp.callback_query(F.data == "admin_enable_restaurant")
async def admin_enable_restaurant_callback(callback: types.CallbackQuery) -> None:
    uid = callback.from_user.id
    if uid not in SUPER_ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.")
        return
    
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            response = await client.get(INTERNAL_API_URL + "/api/admin/restaurants", headers={"X-Telegram-User-Id": str(uid)})
            if response.status_code == 200:
                restaurants = response.json()
                disabled_restaurants = [r for r in restaurants if not r.get("is_enabled")]
                
                if not disabled_restaurants:
                    await callback.message.answer("‚ùå –ù–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è.")
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
                keyboard = []
                for restaurant in disabled_restaurants:
                    keyboard.append([
                        InlineKeyboardButton(
                            text=f"‚úÖ {restaurant['name']}", 
                            callback_data=f"enable_rest_{restaurant['id']}"
                        )
                    ])
                
                keyboard.append([InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")])
                
                kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
                await callback.message.edit_text("üîì –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=kb)
            else:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
    except Exception as e:
        logger.exception("Error getting restaurants for enable")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
    
    await callback.answer()

@dp.callback_query(F.data == "admin_disable_restaurant")
async def admin_disable_restaurant_callback(callback: types.CallbackQuery) -> None:
    uid = callback.from_user.id
    if uid not in SUPER_ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.")
        return
    
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            response = await client.get(INTERNAL_API_URL + "/api/admin/restaurants", headers={"X-Telegram-User-Id": str(uid)})
            if response.status_code == 200:
                restaurants = response.json()
                enabled_restaurants = [r for r in restaurants if r.get("is_enabled")]
                
                if not enabled_restaurants:
                    await callback.message.answer("‚ùå –ù–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è.")
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
                keyboard = []
                for restaurant in enabled_restaurants:
                    keyboard.append([
                        InlineKeyboardButton(
                            text=f"‚ùå {restaurant['name']}", 
                            callback_data=f"disable_rest_{restaurant['id']}"
                        )
                    ])
                
                keyboard.append([InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")])
                
                kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
                await callback.message.edit_text("üîí –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=kb)
            else:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
    except Exception as e:
        logger.exception("Error getting restaurants for disable")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
    
    await callback.answer()

@dp.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_callback(callback: types.CallbackQuery) -> None:
    uid = callback.from_user.id
    if uid not in SUPER_ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    target_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üë• –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_all"),
                InlineKeyboardButton(text="üõí –¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–∞–º", callback_data="broadcast_clients")
            ],
            [
                InlineKeyboardButton(text="üè™ –¢–æ–ª—å–∫–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º", callback_data="broadcast_restaurants")
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
            ]
        ]
    )
    
    await callback.message.answer(
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=target_kb,
        parse_mode="HTML"
    )
    await callback.answer()


# ===========================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ê–î–ú–ò–ù–ö–ò –†–ï–°–¢–û–†–ê–ù–ê (–î–û–õ–ñ–ù–´ –ë–´–¢–¨ –ü–ï–†–ï–î –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê–ú–ò –†–ê–°–°–´–õ–ö–ò)
# ===========================================

@dp.callback_query(F.data == "ra_profile")
async def open_ra_profile(cb: types.CallbackQuery) -> None:
    message = cb.message
    user_id = cb.from_user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º cb.from_user.id –≤–º–µ—Å—Ç–æ message.from_user.id
    if not await _is_restaurant_admin(user_id):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    if not PUBLIC_WEBAPP_URL.lower().startswith("https://"):
        url = PUBLIC_WEBAPP_URL + f"/static/ra_profile.html?uid={user_id}&ngrok-skip-browser-warning=1"
        await cb.message.answer("–í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: " + url)
        return
    url = PUBLIC_WEBAPP_URL + f"/static/ra_profile.html?uid={user_id}&ngrok-skip-browser-warning=1"
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", web_app=WebAppInfo(url=url))]])
    await cb.message.answer("–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", reply_markup=kb)
    await cb.answer()

# ===========================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ê–°–°–´–õ–ö–ò
# ===========================================

@dp.callback_query(F.data.in_(["broadcast_all", "broadcast_clients", "broadcast_restaurants"]))
async def broadcast_target_callback(callback: types.CallbackQuery) -> None:
    uid = callback.from_user.id
    if uid not in SUPER_ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ.")
        return
    
    target_type = callback.data.replace("broadcast_", "")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    # –û—á–∏—â–∞–µ–º PENDING_INPUT –∏ ADD_FLOW, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    PENDING_INPUT.pop(uid, None)
    ADD_FLOW.pop(uid, None)
    
    BROADCAST_FLOW[uid] = {
        "target_type": target_type,
        "text": None,
        "media_type": None,
        "media_file_id": None,
        "step": "text"
    }
    
    target_names = {
        "all": "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
        "clients": "—Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–∞–º", 
        "restaurants": "—Ç–æ–ª—å–∫–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º"
    }
    
    await callback.message.answer(
        f"üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {target_names[target_type]}\n\n"
        f"üí° <i>–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é</i>\n\n"
        f"–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ: <code>–æ—Ç–º–µ–Ω–∞</code>",
        parse_mode="HTML"
    )
    await callback.answer()


@dp.callback_query(F.data == "admin_web")
async def admin_web_callback(callback: types.CallbackQuery) -> None:
    uid = callback.from_user.id
    token = None
    try:
        async with httpx.AsyncClient(timeout=5) as client:
            r = await client.post(INTERNAL_API_URL + "/api/auth/external-link", timeout=5)
            token = r.json().get("token") if r.status_code == 200 else None
    except Exception:
        token = None
    url = PUBLIC_WEBAPP_URL + f"/static/admin.html?uid={uid}&ngrok-skip-browser-warning=1&v=5"
    if token:
        url += f"&token={token}"
    await callback.message.answer(f"–í–µ–±-–∞–¥–º–∏–Ω–∫–∞: {url}")
    await callback.answer()

@dp.callback_query(F.data == "admin_menu")
async def admin_menu_callback(callback: types.CallbackQuery) -> None:
    uid = callback.from_user.id
    if uid not in SUPER_ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é.")
        return
    await callback.message.answer("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏:", reply_markup=ADMIN_INLINE_KB)
    await callback.answer()

# –°—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω")
async def ga_add_restaurant(message: types.Message) -> None:
    uid = message.from_user.id
    if uid not in SUPER_ADMIN_IDS:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.")
        return
    ADD_FLOW[uid] = {"username": None, "name": None}
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:", reply_markup=ADD_REST_KB)


@dp.message(F.text == "@–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞")
async def ga_ask_username(message: types.Message) -> None:
    uid = message.from_user.id
    if uid not in SUPER_ADMIN_IDS or uid not in ADD_FLOW:
        return
    PENDING_INPUT[uid] = {"kind": "ga_add_username"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ @username –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞—Ç–æ—Ä–∞ (–ø—Ä–∏–º–µ—Ä: @user)")


@dp.message(F.text == "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
async def ga_ask_rest_name(message: types.Message) -> None:
    uid = message.from_user.id
    if uid not in SUPER_ADMIN_IDS or uid not in ADD_FLOW:
        return
    PENDING_INPUT[uid] = {"kind": "ga_add_name"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")


async def _try_finish_add_restaurant(uid: int, message: types.Message) -> None:
    state = ADD_FLOW.get(uid)
    if not state or not state.get("username") or not state.get("name"):
        return
    # resolve user id
    admin_user_id = await _resolve_user_id_by_username(state["username"])
    if not admin_user_id:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ username. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    # create restaurant (disabled by default)
    try:
        async with httpx.AsyncClient(timeout=7) as client:
            r = await client.post(PUBLIC_WEBAPP_URL + "/api/admin/restaurants", json={"name": state["name"]}, headers={"X-Telegram-User-Id": str(uid)})
            if r.status_code != 200:
                await message.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.")
                return
            new_id = (r.json() or {}).get("id")
            if not new_id:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å id –Ω–æ–≤–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.")
                return
            # bind admin
            await client.post(PUBLIC_WEBAPP_URL + f"/api/admin/users/bind-admin?user_id={admin_user_id}&restaurant_id={new_id}", headers={"X-Telegram-User-Id": str(uid)})
        await message.answer(f"–†–µ—Å—Ç–æ—Ä–∞–Ω \"{state['name']}\" –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=ADMIN_INLINE_KB)
        ADD_FLOW.pop(uid, None)
    except Exception:
        await message.answer("–°–±–æ–π –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@dp.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def ga_cancel(message: types.Message) -> None:
    uid = message.from_user.id
    ADD_FLOW.pop(uid, None)
    DEL_FLOW.pop(uid, None)
    PENDING_INPUT.pop(uid, None)
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ADMIN_INLINE_KB)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
@dp.message(lambda message: message.text.lower() == "–æ—Ç–º–µ–Ω–∞" and message.from_user.id in ADD_FLOW)
async def cancel_add_restaurant(message: types.Message) -> None:
    uid = message.from_user.id
    
    # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    if uid in BROADCAST_FLOW:
        print(f"DEBUG: User {uid} in BROADCAST_FLOW, skipping ADD_FLOW cancel handler")
        return
    
    if uid in ADD_FLOW:
        ADD_FLOW.pop(uid, None)
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
@dp.message(lambda message: message.from_user.id in ADD_FLOW and ADD_FLOW[message.from_user.id].get("step") == "username" and message.text and (message.text.startswith("@") or message.text.isdigit()))
async def handle_add_restaurant_username(message: types.Message) -> None:
    uid = message.from_user.id
    
    # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    if uid in BROADCAST_FLOW:
        print(f"DEBUG: User {uid} in BROADCAST_FLOW, skipping restaurant username handler")
        return
    
    print(f"DEBUG: Username handler triggered for user {uid}, text: {message.text}")
    
    state = ADD_FLOW[uid]
    input_text = message.text.strip()
    
    admin_user_id = None
    
    # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if input_text.isdigit():
        admin_user_id = int(input_text)
        print(f"DEBUG: Using direct user_id: {admin_user_id}")
    else:
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω username
        admin_user_id = await _resolve_user_id_by_username(input_text)
        if not admin_user_id:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º username. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º (–Ω–∞–ø–∏—Å–∞—Ç—å /start), —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–∞–π—Ç–∏ –ø–æ username.")
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username/ID –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    state["username"] = input_text
    state["admin_user_id"] = admin_user_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–∑–∂–µ
    state["step"] = "name"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")

@dp.message(lambda message: message.from_user.id in ADD_FLOW and ADD_FLOW[message.from_user.id].get("step") == "name")
async def handle_add_restaurant_name(message: types.Message) -> None:
    uid = message.from_user.id
    
    # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    if uid in BROADCAST_FLOW:
        print(f"DEBUG: User {uid} in BROADCAST_FLOW, skipping restaurant name handler")
        return
    
    print(f"DEBUG: Restaurant name handler triggered for user {uid}, text: {message.text}")
    
    state = ADD_FLOW[uid]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    restaurant_name = message.text.strip()
    if not restaurant_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω
    state["name"] = restaurant_name
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω
            create_response = await client.post(
                INTERNAL_API_URL + "/api/admin/restaurants",
                json={"name": restaurant_name},
                headers={"X-Telegram-User-Id": str(uid)}
            )
            
            if create_response.status_code != 200:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.")
                ADD_FLOW.pop(uid, None)
                return
            
            new_restaurant = create_response.json()
            new_id = new_restaurant.get("id")
            
            if not new_id:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –Ω–æ–≤–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.")
                ADD_FLOW.pop(uid, None)
                return
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –∞–¥–º–∏–Ω–∞
            admin_user_id = state.get("admin_user_id")
            if not admin_user_id:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∞–¥–º–∏–Ω–∞.")
                ADD_FLOW.pop(uid, None)
                return
            bind_response = await client.post(
                INTERNAL_API_URL + f"/api/admin/users/bind-admin?user_id={admin_user_id}&restaurant_id={new_id}",
                headers={"X-Telegram-User-Id": str(uid)}
            )
            
            if bind_response.status_code != 200:
                await message.answer("‚ö†Ô∏è –†–µ—Å—Ç–æ—Ä–∞–Ω —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞.")
            else:
                await message.answer(f"‚úÖ –†–µ—Å—Ç–æ—Ä–∞–Ω \"{restaurant_name}\" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∞–¥–º–∏–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω!")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            ADD_FLOW.pop(uid, None)
            
    except Exception as e:
        print(f"DEBUG: Error creating restaurant: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        ADD_FLOW.pop(uid, None)


@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω")
async def ga_delete_restaurant(message: types.Message) -> None:
    uid = message.from_user.id
    if uid not in SUPER_ADMIN_IDS:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.")
        return
    try:
        async with httpx.AsyncClient(timeout=7) as client:
            r = await client.get(PUBLIC_WEBAPP_URL + "/api/admin/restaurants", headers={"X-Telegram-User-Id": str(uid)})
            data = r.json() if r.status_code == 200 else []
            if not data:
                await message.answer("–°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø—É—Å—Ç.")
                return
            lines = [f"{it['id']}: {it['name']}" for it in data]
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n" + "\n".join(lines))
            PENDING_INPUT[uid] = {"kind": "ga_delete_select", "list": data}
    except Exception:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤.")

@dp.callback_query(F.data == "open_menu")
async def open_main_menu(cb: types.CallbackQuery) -> None:
    url = PUBLIC_WEBAPP_URL + f"/static/index.html?uid={cb.from_user.id}&ngrok-skip-browser-warning=1"
    if PUBLIC_WEBAPP_URL.lower().startswith("https://"):
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=url))]])
        await cb.message.answer("Mini app", reply_markup=kb)
    else:
        await cb.message.answer("–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è mini app –Ω—É–∂–µ–Ω HTTPS. –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: " + url)
    await cb.answer()


# -------- –ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∞: –ø–æ–¥–º–µ–Ω—é –∏ –≤–≤–æ–¥ --------


RESTAURANT_DATA_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"), KeyboardButton(text="–ê–¥—Ä–µ—Å")],
        [KeyboardButton(text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True,
)

ORDER_TERMS_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞"), KeyboardButton(text="–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True,
)




@dp.message(F.text == "–î–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
async def admin_restaurant_data(message: types.Message) -> None:
    if not await _is_restaurant_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è", reply_markup=RESTAURANT_DATA_KB)


@dp.message(F.text.in_({"–í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–í–∫–ª—é—á–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω"}))
async def toggle_restaurant(message: types.Message) -> None:
    uid = message.from_user.id
    if not await _is_restaurant_admin(uid):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        async with httpx.AsyncClient(timeout=5) as client:
            info = await client.get(PUBLIC_WEBAPP_URL + "/api/ra/restaurant", headers={"X-Telegram-User-Id": str(uid)})
            r = info.json()
            enabled = not bool(r.get("is_enabled"))
            await client.post(PUBLIC_WEBAPP_URL + f"/api/ra/restaurant/status?enabled={'true' if enabled else 'false'}", headers={"X-Telegram-User-Id": str(uid)})
        await message.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=RA_INLINE_KB)
    except Exception:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å.")


@dp.message(F.text == "–ó–∞–∫–∞–∑—ã")
async def admin_orders(message: types.Message) -> None:
    uid = message.from_user.id
    if not await _is_restaurant_admin(uid):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        async with httpx.AsyncClient(timeout=5) as client:
            res = await client.get(PUBLIC_WEBAPP_URL + "/api/ra/orders", headers={"X-Telegram-User-Id": str(uid)})
            if res.status_code != 200:
                await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑–∞–º.")
                return
            orders = res.json() or []
            if not orders:
                await message.answer("–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
                return
            # –ö—Ä–∞—Ç–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤
            lines = []
            for o in orders[-10:]:
                items = ", ".join([f"{it.get('name','')}√ó{it.get('qty',0)}" for it in o.get('items', [])])
                lines.append(f"#{o.get('id')} ¬∑ {o.get('status')} ¬∑ {o.get('total_price')} —Ä\n{items}")
            await message.answer("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ):\n" + "\n\n".join(lines))
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.")


# --- –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ---

PENDING_INPUT: dict[int, dict] = {}


def _expect(user_id: int, kind: str) -> None:
    PENDING_INPUT[user_id] = {"kind": kind}


@dp.message(F.text == "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
async def ask_working_hours(message: types.Message) -> None:
    if not await _is_restaurant_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    _expect(message.from_user.id, "work_hours")
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å 10:00 - 20:00")


@dp.message(F.text == "–ê–¥—Ä–µ—Å")
async def ask_address(message: types.Message) -> None:
    if not await _is_restaurant_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    _expect(message.from_user.id, "address")
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å:")


@dp.message(F.text == "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
async def ask_phone(message: types.Message) -> None:
    if not await _is_restaurant_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    _expect(message.from_user.id, "phone")
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")


@dp.message(F.text == "–£—Å–ª–æ–≤–∏—è –∑–∞–∫–∞–∑–∞")
async def open_terms(message: types.Message) -> None:
    if not await _is_restaurant_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä", reply_markup=ORDER_TERMS_KB)


@dp.message(F.text == "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞")
async def ask_min_sum(message: types.Message) -> None:
    if not await _is_restaurant_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    _expect(message.from_user.id, "min_sum")
    await message.answer("–ó–∞–¥–∞–π—Ç–µ —Å—É–º–º—É —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1500")


@dp.message(F.text == "–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏")
async def ask_delivery_time(message: types.Message) -> None:
    if not await _is_restaurant_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    _expect(message.from_user.id, "delivery_time")
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å—Ç—Ä–æ–≥–æ –≤ –º–∏–Ω—É—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 90")


@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def go_back(message: types.Message) -> None:
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é RA
    if await _is_restaurant_admin(message.from_user.id):
        await message.answer("–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", reply_markup=RA_INLINE_KB)
    else:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")


# ===========================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ê–°–°–´–õ–ö–ò (–î–û–õ–ñ–ù–´ –ë–´–¢–¨ –ü–ï–†–ï–î –û–ë–©–ò–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–ú)
# ===========================================

@dp.message(lambda message: message.from_user.id in BROADCAST_FLOW)
async def broadcast_text_handler(message: types.Message) -> None:
    uid = message.from_user.id
    state = BROADCAST_FLOW.get(uid)
    if not state:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —à–∞–≥–µ
    if state.get("step") != "text":
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞
    if message.photo:
        state["media_type"] = "photo"
        state["media_file_id"] = message.photo[-1].file_id
        state["text"] = message.caption or ""
    elif message.video:
        state["media_type"] = "video"
        state["media_file_id"] = message.video.file_id
        state["text"] = message.caption or ""
    elif message.text:
        state["text"] = message.text
        state["media_type"] = None
        state["media_file_id"] = None
    else:
        await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    target_names = {
        "all": "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
        "clients": "—Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–∞–º", 
        "restaurants": "—Ç–æ–ª—å–∫–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º"
    }
    
    preview_text = f"üì¢ <b>–ü—Ä–µ–≤—å—é —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
    preview_text += f"<b>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:</b> {target_names[state['target_type']]}\n"
    preview_text += f"<b>–¢–µ–∫—Å—Ç:</b> {state['text'][:200]}{'...' if len(state['text']) > 200 else ''}\n"
    
    if state['media_type']:
        preview_text += f"<b>–ú–µ–¥–∏–∞:</b> {state['media_type']}\n"
    
    confirm_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast_confirm"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")
            ]
        ]
    )
    
    await message.answer(preview_text, reply_markup=confirm_kb, parse_mode="HTML")


@dp.callback_query(F.data == "broadcast_confirm")
async def broadcast_confirm_callback(callback: types.CallbackQuery) -> None:
    uid = callback.from_user.id
    state = BROADCAST_FLOW.get(uid)
    if not state:
        await callback.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ API
        async with httpx.AsyncClient(timeout=30) as client:
            payload = {
                "text": state["text"],
                "media_type": state["media_type"],
                "media_file_id": state["media_file_id"],
                "target_type": state["target_type"]
            }
            
            response = await client.post(
                INTERNAL_API_URL + "/api/admin/broadcast",
                json=payload,
                headers={"X-Telegram-User-Id": str(uid)}
            )
            
            if response.status_code == 200:
                result = response.json()
                await callback.message.answer(
                    f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                    f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result.get('sent', 0)}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {result.get('failed', 0)}\n"
                    f"üìà –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {result.get('total', 0)}",
                    reply_markup=ADMIN_INLINE_KB,
                    parse_mode="HTML"
                )
            else:
                await callback.message.answer(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {response.text}",
                    reply_markup=ADMIN_INLINE_KB
                )
    
    except Exception as e:
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=ADMIN_INLINE_KB
        )
    
    finally:
        BROADCAST_FLOW.pop(uid, None)
    
    await callback.answer()


@dp.callback_query(F.data == "broadcast_cancel")
async def broadcast_cancel_callback(callback: types.CallbackQuery) -> None:
    uid = callback.from_user.id
    BROADCAST_FLOW.pop(uid, None)
    await callback.message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ADMIN_INLINE_KB)
    await callback.answer()

# ===========================================
# –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô
# ===========================================

@dp.message()
async def handle_text_inputs(message: types.Message) -> None:
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    uid = message.from_user.id
    
    # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    if uid in BROADCAST_FLOW:
        return
    
    task = PENDING_INPUT.get(uid)
    if not task or not message.text:
        return
    kind = task.get("kind")
    text = message.text.strip()
    try:
        async with httpx.AsyncClient(timeout=5) as client:
            if kind == "address":
                await client.patch(PUBLIC_WEBAPP_URL + "/api/ra/restaurant", headers={"X-Telegram-User-Id": str(uid)}, json={"address": text})
                await message.answer("–ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=RESTAURANT_DATA_KB)
            elif kind == "phone":
                await client.patch(PUBLIC_WEBAPP_URL + "/api/ra/restaurant", headers={"X-Telegram-User-Id": str(uid)}, json={"phone": text})
                await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=RESTAURANT_DATA_KB)
            elif kind == "min_sum":
                val = int(text)
                await client.patch(PUBLIC_WEBAPP_URL + "/api/ra/restaurant", headers={"X-Telegram-User-Id": str(uid)}, json={"delivery_min_sum": val})
                await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=ORDER_TERMS_KB)
            elif kind == "delivery_time":
                val = int(text)
                await client.patch(PUBLIC_WEBAPP_URL + "/api/ra/restaurant", headers={"X-Telegram-User-Id": str(uid)}, json={"delivery_time_minutes": val})
                await message.answer("–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=ORDER_TERMS_KB)
            elif kind == "work_hours":
                # –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: "—Å HH:MM - HH:MM"
                import re
                m = re.search(r"(\d{1,2}):(\d{2}).*?(\d{1,2}):(\d{2})", text)
                if not m:
                    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: —Å 10:00 - 20:00")
                else:
                    h1, m1, h2, m2 = map(int, m.groups())
                    open_min = h1 * 60 + m1
                    close_min = h2 * 60 + m2
                    await client.patch(PUBLIC_WEBAPP_URL + "/api/ra/restaurant", headers={"X-Telegram-User-Id": str(uid)}, json={"work_open_min": open_min, "work_close_min": close_min})
                    await message.answer("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=RESTAURANT_DATA_KB)
            elif kind == "ga_add_username":
                state = ADD_FLOW.get(uid)
                if not state:
                    return
                state["username"] = text
                await message.answer("Username —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∫–Ω–æ–ø–∫–∞: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞).", reply_markup=ADD_REST_KB)
                await _try_finish_add_restaurant(uid, message)
            elif kind == "ga_add_name":
                state = ADD_FLOW.get(uid)
                if not state:
                    return
                state["name"] = text
                await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ @username (–∫–Ω–æ–ø–∫–∞: @–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞).", reply_markup=ADD_REST_KB)
                await _try_finish_add_restaurant(uid, message)
            elif kind == "ga_delete_select":
                # –æ–∂–∏–¥–∞–µ–º ID –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                try:
                    rid = int(text)
                except ValueError:
                    await message.answer("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.")
                    return
                PENDING_INPUT[uid] = {"kind": "ga_delete_confirm", "rid": rid}
                await message.answer("–¢–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω?", reply_markup=CONFIRM_KB)
            elif kind == "ga_delete_confirm":
                if text.lower() == "–¥–∞":
                    rid = PENDING_INPUT.get(uid, {}).get("rid")
                    if not rid:
                        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.")
                        return
                    async with httpx.AsyncClient(timeout=7) as client:
                        await client.delete(PUBLIC_WEBAPP_URL + f"/api/admin/restaurants/{rid}", headers={"X-Telegram-User-Id": str(uid)})
                    await message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω —É–¥–∞–ª—ë–Ω.", reply_markup=ADMIN_INLINE_KB)
                else:
                    await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ADMIN_INLINE_KB)
    except ValueError:
        await message.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    finally:
        PENDING_INPUT.pop(uid, None)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---

@dp.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    uid = callback.from_user.id
    if uid not in SUPER_ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return
    await callback.message.edit_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=STATS_KB)
    await callback.answer()


@dp.callback_query(F.data == "stats_global")
async def stats_global_callback(callback: types.CallbackQuery) -> None:
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º"""
    uid = callback.from_user.id
    if uid not in SUPER_ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return
    
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            response = await client.get(INTERNAL_API_URL + "/api/admin/stats", headers={"X-Telegram-User-Id": str(uid)})
            if response.status_code == 200:
                data = response.json()
                
                stats_text = "üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º**\n\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
                month_stats = data.get("month", {})
                stats_text += f"üìÖ **–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:**\n"
                stats_text += f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {month_stats.get('orders', 0)} –Ω–∞ —Å—É–º–º—É {month_stats.get('sum', 0):,} ‚ÇΩ\n"
                stats_text += f"‚Ä¢ –û—Ç–º–µ–Ω: {month_stats.get('cancelled', 0)}\n"
                stats_text += f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–π: {month_stats.get('modified', 0)}\n\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                today_stats = data.get("today", {})
                stats_text += f"üìÜ **–ó–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"
                stats_text += f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {today_stats.get('orders', 0)} –Ω–∞ —Å—É–º–º—É {today_stats.get('sum', 0):,} ‚ÇΩ\n"
                stats_text += f"‚Ä¢ –û—Ç–º–µ–Ω: {today_stats.get('cancelled', 0)}\n"
                stats_text += f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–π: {today_stats.get('modified', 0)}\n"
                
                await callback.message.edit_text(stats_text, parse_mode="Markdown", reply_markup=STATS_KB)
            else:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", reply_markup=STATS_KB)
    except Exception as e:
        logger.exception("Error getting global stats")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", reply_markup=STATS_KB)
    
    await callback.answer()


@dp.callback_query(F.data == "stats_users")
async def stats_users_callback(callback: types.CallbackQuery) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    uid = callback.from_user.id
    if uid not in SUPER_ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return
    
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            response = await client.get(INTERNAL_API_URL + "/api/admin/stats/users", headers={"X-Telegram-User-Id": str(uid)})
            if response.status_code == 200:
                data = response.json()
                
                stats_text = "üë• **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
                stats_text += f"üìä **–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**\n"
                stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data.get('total_users', 0):,}\n"
                stats_text += f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {data.get('blocked_users', 0):,}\n\n"
                
                stats_text += f"üìÖ **–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:**\n"
                stats_text += f"‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data.get('unique_users_month', 0):,}\n"
                stats_text += f"‚Ä¢ –ü–æ—Å–µ—â–µ–Ω–∏–π: {data.get('visits_month', 0):,}\n\n"
                
                stats_text += f"üìÜ **–ó–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"
                stats_text += f"‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data.get('unique_users_today', 0):,}\n"
                stats_text += f"‚Ä¢ –ü–æ—Å–µ—â–µ–Ω–∏–π: {data.get('visits_today', 0):,}\n"
                
                await callback.message.edit_text(stats_text, parse_mode="Markdown", reply_markup=STATS_KB)
            else:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=STATS_KB)
    except Exception as e:
        logger.exception("Error getting user stats")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=STATS_KB)
    
    await callback.answer()


@dp.callback_query(F.data == "stats_restaurant")
async def stats_restaurant_callback(callback: types.CallbackQuery) -> None:
    """–í—ã–±–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    uid = callback.from_user.id
    if uid not in SUPER_ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return
    
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            response = await client.get(INTERNAL_API_URL + "/api/admin/stats/restaurants", headers={"X-Telegram-User-Id": str(uid)})
            if response.status_code == 200:
                data = response.json()
                restaurants = data.get("restaurants", [])
                
                if not restaurants:
                    await callback.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤", reply_markup=STATS_KB)
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
                keyboard = []
                for restaurant in restaurants:
                    status = "‚úÖ" if restaurant.get("is_enabled") else "‚ùå"
                    keyboard.append([
                        InlineKeyboardButton(
                            text=f"{status} {restaurant['name']}", 
                            callback_data=f"stats_rest_{restaurant['id']}"
                        )
                    ])
                
                keyboard.append([InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_stats")])
                
                kb = InlineKeyboardMarkup(inline_keyboard=keyboard)
                await callback.message.edit_text("üè™ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=kb)
            else:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤", reply_markup=STATS_KB)
    except Exception as e:
        logger.exception("Error getting restaurants list")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤", reply_markup=STATS_KB)
    
    await callback.answer()


@dp.callback_query(F.data.startswith("stats_rest_"))
async def stats_restaurant_detail_callback(callback: types.CallbackQuery) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    uid = callback.from_user.id
    if uid not in SUPER_ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return
    
    restaurant_id = int(callback.data.split("_")[-1])
    
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            stats_response = await client.get(
                INTERNAL_API_URL + f"/api/admin/stats/by-restaurant?restaurant_id={restaurant_id}", 
                headers={"X-Telegram-User-Id": str(uid)}
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            restaurants_response = await client.get(
                INTERNAL_API_URL + "/api/admin/stats/restaurants", 
                headers={"X-Telegram-User-Id": str(uid)}
            )
            
            if stats_response.status_code == 200 and restaurants_response.status_code == 200:
                stats_data = stats_response.json()
                restaurants_data = restaurants_response.json()
                
                # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
                restaurant_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω"
                for restaurant in restaurants_data.get("restaurants", []):
                    if restaurant["id"] == restaurant_id:
                        restaurant_name = restaurant["name"]
                        break
                
                stats_text = f"üè™ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ \"{restaurant_name}\"**\n\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
                month_stats = stats_data.get("month", {})
                stats_text += f"üìÖ **–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:**\n"
                stats_text += f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {month_stats.get('orders', 0)} –Ω–∞ —Å—É–º–º—É {month_stats.get('sum', 0):,} ‚ÇΩ\n"
                stats_text += f"‚Ä¢ –û—Ç–º–µ–Ω: {month_stats.get('cancelled', 0)}\n"
                stats_text += f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–π: {month_stats.get('modified', 0)}\n\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                today_stats = stats_data.get("today", {})
                stats_text += f"üìÜ **–ó–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"
                stats_text += f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {today_stats.get('orders', 0)} –Ω–∞ —Å—É–º–º—É {today_stats.get('sum', 0):,} ‚ÇΩ\n"
                stats_text += f"‚Ä¢ –û—Ç–º–µ–Ω: {today_stats.get('cancelled', 0)}\n"
                stats_text += f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–π: {today_stats.get('modified', 0)}\n"
                
                # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
                back_kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚Üê –ö —Å–ø–∏—Å–∫—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤", callback_data="stats_restaurant")],
                    [InlineKeyboardButton(text="‚Üê –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")]
                ])
                
                await callback.message.edit_text(stats_text, parse_mode="Markdown", reply_markup=back_kb)
            else:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", reply_markup=STATS_KB)
    except Exception as e:
        logger.exception("Error getting restaurant stats")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", reply_markup=STATS_KB)
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏
@dp.callback_query(F.data.startswith("enable_rest_"))
async def enable_restaurant_callback(callback: types.CallbackQuery) -> None:
    """–í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    uid = callback.from_user.id
    if uid not in SUPER_ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.")
        return
    
    restaurant_id = int(callback.data.split("_")[-1])
    
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            response = await client.patch(
                INTERNAL_API_URL + f"/api/admin/restaurants/{restaurant_id}",
                headers={"X-Telegram-User-Id": str(uid), "Content-Type": "application/json"},
                json={"is_enabled": True}
            )
            
            if response.status_code == 200:
                await callback.message.edit_text("‚úÖ –†–µ—Å—Ç–æ—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω!", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]))
            else:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]))
    except Exception as e:
        logger.exception("Error enabling restaurant")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]))
    
    await callback.answer()


@dp.callback_query(F.data.startswith("disable_rest_"))
async def disable_restaurant_callback(callback: types.CallbackQuery) -> None:
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    uid = callback.from_user.id
    if uid not in SUPER_ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.")
        return
    
    restaurant_id = int(callback.data.split("_")[-1])
    
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            response = await client.patch(
                INTERNAL_API_URL + f"/api/admin/restaurants/{restaurant_id}",
                headers={"X-Telegram-User-Id": str(uid), "Content-Type": "application/json"},
                json={"is_enabled": False}
            )
            
            if response.status_code == 200:
                await callback.message.edit_text("‚ùå –†–µ—Å—Ç–æ—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω!", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]))
            else:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]))
    except Exception as e:
        logger.exception("Error disabling restaurant")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]))
    
    await callback.answer()


@dp.callback_query(F.data.startswith("delete_rest_"))
async def delete_restaurant_confirm_callback(callback: types.CallbackQuery) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    uid = callback.from_user.id
    if uid not in SUPER_ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.")
        return
    
    restaurant_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            response = await client.get(INTERNAL_API_URL + "/api/admin/restaurants", headers={"X-Telegram-User-Id": str(uid)})
            if response.status_code == 200:
                restaurants = response.json()
                restaurant_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω"
                for restaurant in restaurants:
                    if restaurant["id"] == restaurant_id:
                        restaurant_name = restaurant["name"]
                        break
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{restaurant_id}")],
                    [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_delete_restaurant")],
                    [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ])
                
                await callback.message.edit_text(
                    f"üóëÔ∏è **–¢–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω \"{restaurant_name}\"?**\n\n"
                    "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
                    parse_mode="Markdown",
                    reply_markup=confirm_kb
                )
            else:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
    except Exception as e:
        logger.exception("Error getting restaurant data for delete confirmation")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
    
    await callback.answer()


@dp.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_restaurant_callback(callback: types.CallbackQuery) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    uid = callback.from_user.id
    if uid not in SUPER_ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.")
        return
    
    restaurant_id = int(callback.data.split("_")[-1])
    
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            response = await client.delete(
                INTERNAL_API_URL + f"/api/admin/restaurants/{restaurant_id}",
                headers={"X-Telegram-User-Id": str(uid)}
            )
            
            if response.status_code == 200:
                await callback.message.edit_text("üóëÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]))
            else:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]))
    except Exception as e:
        logger.exception("Error deleting restaurant")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]))
    
    await callback.answer()


@dp.callback_query(F.data == "admin_back")
async def admin_back_callback(callback: types.CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    uid = callback.from_user.id
    if uid not in SUPER_ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")
        return
    
    await callback.message.edit_text("üîß –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏:", reply_markup=ADMIN_INLINE_KB)
    await callback.answer()


@dp.message(Command("ra"))
async def restaurant_admin_entry(message: types.Message) -> None:
    if not PUBLIC_WEBAPP_URL.lower().startswith("https://"):
        await message.answer("–î–ª—è –∞–¥–º–∏–Ω–∫–∏ –Ω—É–∂–µ–Ω HTTPS URL.")
        return
    url = PUBLIC_WEBAPP_URL + f"/static/ra.html?uid={message.from_user.id}&ngrok-skip-browser-warning=1&v=1"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ê–¥–º–∏–Ω–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", web_app=WebAppInfo(url=url))]]
    )
    await message.answer("–ê–¥–º–∏–Ω–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", reply_markup=kb)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ê–°–°–´–õ–ö–ò ===

@dp.message(lambda message: message.text and message.text.lower() == "–æ—Ç–º–µ–Ω–∞" and message.from_user.id in BROADCAST_FLOW)
async def broadcast_cancel(message: types.Message) -> None:
    uid = message.from_user.id
    if uid in BROADCAST_FLOW:
        BROADCAST_FLOW.pop(uid, None)
    await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ADMIN_INLINE_KB)


async def main() -> None:
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN is required")
    bot = Bot(BOT_TOKEN)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

