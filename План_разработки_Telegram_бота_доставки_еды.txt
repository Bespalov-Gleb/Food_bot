План разработки Telegram‑бота доставки еды (mini app)

0. Цели и рамки
- Цель: реализовать Telegram‑бот с mini app, аналог ключевых функций Яндекс Еда/Delivery Club для одного города/региона с поддержкой нескольких ресторанов, корзиной до 4 ресторанов, оформлением заказа, статусов, админ‑панелей (главная и ресторанная), рассылок, статистики и журнала действий.
- Ограничения: способы оплаты без онлайн‑эквайринга (наличными, картой курьеру, переводом). Минимальная сумма заказа по ресторану. Без сложной логистики (без трекинга курьера).

1. Архитектура и основные компоненты
- Компоненты:
  1) Telegram Bot (взаимодействие, уведомления, deep‑link/open web app)
  2) Mini app (WebApp) — клиент для пользователей и ресторанов (SPA)
  3) Backend API (REST + webhooks для Telegram)
  4) БД (реляционная) + миграции
  5) Фоновая обработка задач (таймеры статусов, рассылки, email)
  6) Админ‑веб (разделы главного админа и ресторана)
  7) Хранилище медиа (изображения блюд/баннеров)
  8) Логи/журнал в Telegram‑канал
- Ключевые домены: Пользователи, Рестораны, Категории, Блюда, Опции/модификаторы, Корзина, Заказы, Отзывы, Рассылки, Статистика, Права доступа.

2. Бизнес‑правила
- Главная mini app: горизонтальные слайды подборок (необязательно), ниже список ресторанов.
- Низ навигации: Главное, Акции, Корзина, Профиль.
- Страница ресторана: название, рейтинг/отзывы, условия доставки, время доставки, горизонтальная лента категорий, инфо‑карточки, «о ресторане».
- Сетка блюд (2 в ряд), под фото цена/название; «+» превращается в «− qty +». Нажатие на фото открывает карточку блюда; если у блюда есть опции — «+» открывает карточку с выбором.
- Корзина: общая для до 4 ресторанов, табы по ресторанам, внизу «Далее», опция приборов; минимальная сумма — блокирует «Далее», показывает «Добавьте ещё на N р».
- Оформление (шаг 2): ресторан, способ (доставка/навынос), телефон, адрес (обязателен для доставки), комментарий, способ оплаты, Итого, «Оформить заказ».
- После отправки: mini app закрывается, бот шлёт сообщение + кнопка «Открыть текущий заказ».
- История и текущий заказ: статус наверху, «Связаться с нами» (ТГ линк), затем — при принятии — «Связаться с рестораном», «Доставлено» (ручное, иначе авто по таймеру).
- Ресторан‑админ: профиль ресторана (режим, адрес, телефон), включить/выключить ресторан, история заказов, условия/минималка/время доставки, обработка заказа (принять, изменить, отменить, доставлено), обязательный комментарий при изменении/отмене.
- Главный админ: добавлять/удалять рестораны, включать/выключать, рассылки (клиенты/рестораны/все), статистика (общая и по ресторанам), база пользователей/блокировки, модерация отзывов, журнал действий.
- Журнал: в канал отправляются все ключевые события (создание/принятие/изменение/отмена/доставлено, изменения в настройках).

3. Модель данных (первичный контур)
- User: id, telegram_id, phone, name, birth_date, is_blocked, roles [client|restaurant_admin|super_admin]
- Restaurant: id, name, is_enabled, rating_agg, delivery_min_sum, delivery_fee, delivery_time_minutes, address, phone, working_hours, description, info_cards[]
- RestaurantAdmin: id, user_id, restaurant_id
- Category: id, restaurant_id, name, sort
- Dish: id, restaurant_id, category_id, name, description, price, image, is_available, has_options
- DishOptionGroup: id, dish_id, name, min_select, max_select, required
- DishOption: id, option_group_id, name, price_delta
- Collection (подборка): id, type [restaurants|dishes], name, items[] (refs to Restaurant/Dish), sort
- Cart: id, user_id, items[], per‑restaurant partitioning, cutlery_count, updated_at
- CartItem: id, cart_id, restaurant_id, dish_id, qty, chosen_options[]
- Order: id, user_id, restaurant_id, status [created|sent|accepted|delivered|cancelled|modified], total_price, delivery_type [delivery|pickup], address, phone, payment_method [cash|card_to_courier|transfer], client_comment, created_at
- OrderItem: id, order_id, dish_id, name_snapshot, price_snapshot, qty, chosen_options_snapshot[]
- OrderStatusHistory: id, order_id, status, at, payload
- Review: id, order_id, restaurant_id, user_id, rating 1..5, comment, created_at, is_moderated, is_deleted
- Broadcast: id, audience [clients|restaurants|all], media_type, media_url, text, created_by, sent_at
- StatsDaily/Monthly: aggregated counters (orders, revenue, cancels, modifications, unique users, visits)
- LegalDocs: user_agreement_url, privacy_policy_url (версионирование по желанию)

4. API (черновой список эндпоинтов)
- Auth/Users: POST /api/auth/telegram/init, GET /api/users/me, PATCH /api/users/me (имя, birth_date), GET/PATCH /api/users/me/address, GET /api/legal
- Restaurants: GET /api/restaurants, GET /api/restaurants/{id}, GET /api/restaurants/{id}/menu, GET /api/collections
- Dishes: GET /api/dishes/{id}
- Cart: GET /api/cart, POST /api/cart/items, PATCH /api/cart/items/{id}, DELETE /api/cart/items/{id}, POST /api/cart/switch-restaurant-tab
- Checkout/Orders: POST /api/orders (по активному табу ресторана), GET /api/orders/{id}, GET /api/orders (history), POST /api/orders/{id}/delivered, POST /api/orders/{id}/cancel (by restaurant with reason), POST /api/orders/{id}/accept, POST /api/orders/{id}/modify
- Reviews: POST /api/reviews, GET /api/restaurants/{id}/reviews (для админа — модерация), DELETE /api/reviews/{id}
- Admin (super): POST /api/admin/restaurants, DELETE /api/admin/restaurants/{id}, PATCH /api/admin/restaurants/{id}/status, POST /api/admin/broadcast, GET /api/admin/stats, GET /api/admin/users, PATCH /api/admin/users/{id}/block
- Admin (restaurant): GET/PATCH /api/ra/profile, GET /api/ra/orders, GET /api/ra/orders/{id}, POST /api/ra/orders/{id}/{accept|modify|cancel|delivered}, PATCH /api/ra/settings (delivery terms, working hours)

5. Telegram‑бот: сценарии и интеграция
- Команды и кнопки: старт, открытие mini app, «Открыть текущий заказ», «Профиль ресторана» (для /admin), рассылки через бек (не через команду).
- Уведомления пользователю: заказ отправлен, принят (с ETA), доставлен (если авто/ручное), отменён/изменён (с комментарием), запрос оценки после доставки.
- Уведомления ресторану: новый заказ (бот + email), изменение статуса, ссылка в мини‑приложение админа ресторана.
- Журнал: сервисные сообщения в канал по ключевым событиям.

6. Mini app (клиент)
- Страницы:
  1) Главное: горизонтальные подборки, список ресторанов
  2) Акции/подборки (список коллекций)
  3) Ресторан: инфо, горизонтальные категории, инфо‑карточки, сетка блюд
  4) Блюдо: описание, опции/модификаторы, − qty +, «В корзину»
  5) Корзина (шаг 1): табы ресторанов, управление qty, приборы, «Открыть меню», «Далее»
  6) Оформление (шаг 2): доставка/навынос, телефон, адрес (обязателен при доставке), комментарий, оплата, Итого, «Оформить заказ»
  7) Профиль: история заказов, личные данные (телефон, адрес, имя, ДР), правовые документы, «Связь» (ТГ линк)
  8) Текущий заказ: статус, «Связаться с нами/рестораном», «Доставлено», детали заказа
- Правила UI: скрывать недоступные рестораны (выключены), минимальная сумма — блокировать «Далее», «Добавьте ещё на N р». Модалки для блюд закрываются свайпом.

7. Mini app (ресторан‑админ)
- Разделённое приложение/раздел: без списка ресторанов, только профиль ресторана.
- Экран «История заказов»: список, фильтры по статусам.
- Экран «Заказ»: детали, кнопки «Принять» (с установкой ETA), «Изменить заказ» (возврат к корзине‑вью с обязательным комментарием), «Отменить» (обязательный комментарий), «Доставлено» (меняет статус и уведомляет клиента).
- Экран «Настройки»: режим работы, адрес, телефон, включить/выключить ресторан, условия доставки (мин. сумма, стоимость, время).

8. Корзина и заказ: логика
- До 4 ресторанов одновременно в корзине. При попытке добавить 5‑й — показать диалог (как в ЯЕ) с возможностью заменить.
- Переключение табов ресторанов внутри корзины. Кнопка «Открыть меню» доступна, если корзина открыта с главной страницы.
- Расчёт Итого по активному ресторану и общая сумма корзины (по желанию). Для оформления используется активный ресторан.
- Минимальная сумма — блокирует «Далее» и показывает «Добавьте ещё на N р».

9. Жизненный цикл заказа и таймеры
- Статусы: created → sent → accepted → delivered (или cancelled/modified)
- После accepted — старт таймера на выбранное рестораном время доставки; по истечении — авто delivered (если не было ручного изменения). Кнопка «Доставлено» у клиента/ресторана ставит delivered сразу.
- Изменение/отмена рестораном — требуются комментарии; клиенту улетает уведомление и deep‑link в текущий заказ.

10. Отзывы и рейтинг
- После delivered — показать плашку с предложением оценки (1–5). Кнопка отправить активна только при выборе звезды. Комментарий опционален. Главный админ может удалять отзывы.

11. Рассылки
- Аудитории: клиенты / рестораны / все. Содержимое: текст + медиа (фото/видео). Отправка через бек с очередями и бэкоффом.

12. Статистика и метрики
- Общая: заказы в месяц/день, сумма, отмены, изменения, уникальные пользователи (месяц/день), посещения (клики в боте), общее кол‑во пользователей, блокировок бота.
- По ресторану: аналогично + рейтинг/кол‑во отзывов.

13. Права и безопасность
- Роли: super_admin, restaurant_admin, client. Проверка ролей на уровне API. Доступ в ресторанную админку только для привязанных аккаунтов. Главный админ может назначать/удалять ресторан‑аккаунты.
- Блокировка пользователей: запрет действий, скрытие mini app при блоке.

14. Медиа и контент
- Загрузка изображений блюд/баннеров, валидации по размеру. Хранение URL. Генерация миниатюр при необходимости.

15. Последовательность реализации (итеративно)
- И1 (MVP, 1–2 недели):
  1) База домена (пользователи, рестораны, меню без опций)
  2) Главная + список ресторанов + страница ресторана + сетка блюд
  3) Корзина (1 ресторан), оформление заказа, уведомления пользователю/ресторану, журнал
  4) Ресторан‑админ: принять/доставлено, таймер авто‑delivered
- И2: 
  1) Опции/модификаторы блюд
  2) Корзина до 4 ресторанов, табы, «Добавьте ещё на N р», «Открыть меню»
  3) История заказов, текущий заказ, «Связаться с нами/рестораном», ручное «Доставлено»
- И3:
  1) Главная админка (добавить/удалить ресторан, включить/выключить)
  2) Рассылки, базовая статистика
  3) Блокировка пользователей
- И4:
  1) Подборки (слайды), Акции
  2) Отзывы и модерация
  3) Расширенная статистика/метрики
- И5:
  1) Email отправка заказов ресторанам
  2) Доработка UI/UX, правовые документы, профили

16. Критерии готовности (DoD) для ключевых фич
- Mini app клиент: навигация, корзина, оформление, профили, текущий заказ — без критических багов.
- Ресторан‑админ: обработка заказов от получения до доставки, обязательные комментарии на отмену/изменение.
- Главная админка: управление ресторанами, рассылки, базовая статистика работают и безопасны.
- Таймеры и авто‑delivered надёжны, журнал событий отражает ключевые изменения.
- Минимальная сумма и 4 ресторана в корзине соблюдаются валидациями на клиенте и сервере.

17. Тестирование
- Модульные тесты домена/сервисов, интеграционные тесты API, e2e сценарии: заказ без опций, с опциями, с минимальной суммой, 4 ресторана, изменение/отмена рестораном, авто‑delivered, отзывы, рассылки.

18. Риски и запасные решения
- Сложность multi‑cart: аккуратная модель корзины с разбиением по ресторанам.
- Уведомления и рассылки — ограничение Telegram: использовать очереди/батчинг, ретраи.
- Изменение заказа рестораном — согласованность сумм и позиций (снапшоты в OrderItem).

19. Набросок ключевых сервисов (бек)
- UserService, RestaurantService, MenuService, CartService, OrderService (статусы/таймеры), ReviewService, BroadcastService, StatsService, AdminService, JournalService.

20. Мини‑спецификация UI состояний
- Кнопки «Далее/Оформить»: активны только при валидности данных (минимальная сумма, телефон, адрес для доставки, способ оплаты).
- Отображать некликабельную кнопку «Добавьте ещё на N р» если сумма < минимальной.
- Когда ресторан выключен, он не показывается в списке и недоступен по прямой ссылке (обработка 404/Disabled).

Примечание: реализацию сайта админки объединяем с mini app (единое веб‑приложение с разделами и ролями). При необходимости вынос в отдельный домен — без изменения API.

